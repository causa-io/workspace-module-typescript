import { WorkspaceContext } from '@causa/workspace';
import { ProjectPushArtefact } from '@causa/workspace-core';
import { InvalidFunctionArgumentError } from '@causa/workspace/function-registry';
import * as tar from 'tar';
import { NpmService } from '../services/index.js';
import {
  ARCHIVED_PACKAGE_FILE,
  makeNpmPackageArtefactDestination,
  type NpmPackageInfo,
} from '../utils.js';

/**
 * Implements the {@link ProjectPushArtefact} function for an npm package by calling `npm publish`.
 * Only supports publishing archives (generated by `npm pack` / `cs build`).
 * The destination must match the package information in the archive.
 */
export class ProjectPushArtefactForNpmPackage extends ProjectPushArtefact {
  async _call(context: WorkspaceContext): Promise<string> {
    const projectPath = context.getProjectPathOrThrow();
    const npmService = context.service(NpmService);

    if (this.overwrite) {
      throw new InvalidFunctionArgumentError(
        `The 'overwrite' argument is not supported when publishing npm packages. A version cannot be reused.`,
      );
    }

    const packageInfo = await this.readPackageInfoFromArtefact(this.artefact);
    const destination = makeNpmPackageArtefactDestination(packageInfo);
    if (this.destination !== destination) {
      throw new InvalidFunctionArgumentError(
        `Destination '${this.destination}' is not supported. The only allowed destination is the one matching the npm package definition, i.e. '${destination}'.`,
      );
    }

    const projectName = context.get('project.name');
    context.logger.info(
      `ðŸšš Publishing npm package for project '${projectName}'.`,
    );

    await npmService.publish({
      packageSpec: this.artefact,
      workingDirectory: projectPath,
    });

    context.logger.info(`ðŸšš Successfully published npm package.`);

    return this.destination;
  }

  /**
   * Reads the `package.json` file from the provided npm package archive.
   *
   * @param file The path to the npm package archive.
   * @returns The parsed `package.json` content from the archive.
   */
  private async readPackageInfoFromArtefact(
    file: string,
  ): Promise<NpmPackageInfo> {
    const packageJson: Buffer[] = [];

    await tar.t({
      file,
      filter: (path) => path === ARCHIVED_PACKAGE_FILE,
      onReadEntry: (e) => e.on('data', (b) => packageJson.push(b)),
    });

    if (packageJson.length === 0) {
      throw new Error(
        `'package.json' could not be found in the npm package artefact.`,
      );
    }

    return JSON.parse(Buffer.concat(packageJson).toString());
  }

  _supports(context: WorkspaceContext): boolean {
    return (
      ['javascript', 'typescript'].includes(
        context.get('project.language') ?? '',
      ) && context.get('project.type') === 'package'
    );
  }
}
